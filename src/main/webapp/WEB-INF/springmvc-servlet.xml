<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 在SpringMVC中进行一些配置，防止SpringMVC和SpringIOC对同一个对象的管理重合 -->
	<context:component-scan base-package="com.ls">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<!-- 静态资源处理方法1（先交由web应用服务器处理，进行后缀匹配），如：css,js,images等文件 -->
	<!-- 如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理（不同web服务器交由不同servlet处理，此处通过servlet-name指定），如果不是静态资源的请求，才由DispatcherServlet处理 -->
	<mvc:default-servlet-handler default-servlet-name="default" />

	<!-- 静态资源处理方法2（再交由sprinmvc处理，进行路径前缀匹配），如：css,js,images等文件 -->
	<mvc:resources location="/resources/" mapping="/resources/**"/>

	<!-- 相当于注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean。扩充了注解驱动，可以将请求参数绑定到控制器参数 -->
	<mvc:annotation-driven />
	
	<!-- ViewResolver -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- freemarker config -->
	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/freemarker/" />
	</bean>

	<!-- View resolvers can also be configured with ResourceBundles or XML files. 
		If you need different view resolving based on Locale, you have to use the 
		resource bundle resolver. -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="order" value="1" />
		<property name="cache" value="true" />
		<property name="prefix" value="" />
		<property name="suffix" value=".ftl" />
	</bean>

	<!-- upload settings -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- <property name="resolveLazily" value="true"></property> -->
		<property name="maxUploadSize" value="1024000"></property>
	</bean>

	<bean id="errorMapping"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- 定义默认的异常处理页面，当该异常类型的注册时使用 -->
		<property name="defaultErrorView" value="errors/500"></property>
		<!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
		<property name="exceptionAttribute" value="exception"></property>
		<!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 -->
		<property name="exceptionMappings">
			<props>
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">/errors/500</prop>
				<prop key="java.sql.SQLException">errors/sqlexp</prop>
			</props>
		</property>
	</bean>

	<!-- configure the locale resource -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="locale_zh_CN"></property>
	</bean>

	<!-- 直接访问jsp页面 -->
	<mvc:view-controller path="/locale" view-name="locale" />
	<mvc:view-controller path="/test" view-name="test" />

	<!-- ... -->

</beans>